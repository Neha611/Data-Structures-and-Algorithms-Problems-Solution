Problem Statement -:

You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. Also given an integer W which represents knapsack capacity, 
find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item or dont pick it (0-1 property).

Example 1 -:

N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3
Explanation: Choose the last item that weighs 1 unit and holds a value of 3.

Example 2 -:

N = 3
W = 3
values[] = {1,2,3}
weight[] = {4,5,6}
Output: 0
Explanation: Every item has a weight exceeding the knapsack's capacity (3).

Problem Constraints -:

1 ≤ N ≤ 1000
1 ≤ W ≤ 1000
1 ≤ wt[i] ≤ 1000
1 ≤ v[i] ≤ 1000

Topic Tags -: Dynamic Programming, Algorithms

Company Tags -: Flipkart, Morgan Stanley, Amazon, Microsoft, Snapdeal, Oracle, Payu, Visa, Directi, GreyOrange, Mobicip

Intuition -: 

In this problem we are given a bag having capacity W and we have to fill this bag with items having some weight and profit such that total profit obtained is maximum. Now you might be thinking of taking all the 
weights of maximum profit that can fill up the bag. But unfortunately this is not going to work here. Let me show you why.
Consider you have a bag of capacity W=5 and weight of items = [3,2,4] values = [60,100,120]. Now here you are seeing that item having weight 4 has maximum value so we will take it and keep it in our bag. So now
W=5-4 => W=1 and total profit=120 now we don't have any other weight left that can fit in our bag. But if you take weights 3 and 2 in your bag then the total profit you will get is 160.
So here seeing the problem carefully we came at conclusion that either we can take a possible weight and add its value to total profit or we can skip it. This means that each of our possible weights come with two 
choices of taking or skipping. So let's apply recurssion here. Recursively we will see each case of skipping and taking a particular weight.

                                                                 (3,60) W=5
                                                                  /    \
                                                        W=2 (2,100)    (2,100) W=5
                                                            /   \     
                                                  W=0 (4,120)    (4,120)
                                                                   W=2
So this is how our recurssion tree will be built. So here every item has 2 choices and we have N items. So the time this algorithm will take is O(2^N). If N=1000 then the time taken will be O(2^1000). This is not
going to work. Now what do we do? Let's see !
Here when we built complete recurssion tree we will encounter that many of the states are repeating i.e. we have already seen those cases but still we are evaluating them again and again and this is leading to
higher time. So one solution is storing the results of every state. Now whenever we will encounter a repeating state we don't have to evaluate it again rather we can use the result we have stored earlier. And this
is what Dynamic Programming is called. 

Memoization -:

In case of recurssion we are going from top to bottom till leaf to get our answer and we will store the answer of each of our recurssion state in a data structure, this is called Memoization. This is a top down
appraoch.
So here we will make 2D-vector that will store the answer of each of our state. Remember a state is determined by number of changing variables in recurssion. Here capacity of bag is changing and a pointer traversing
our weights array is changing. So our 2-D vector will store the answer of each case of W and idx. So size of our 2-D vector will be (W+1)*(N) {as we are having capacity W and total N items}. We will initialize our
vector by -1 which indicates that none of the states is evaluated yet. Whenever we get repeating state we will directly use its result stored in our 2D vector.
So this was our recurssion approach. But this is not it we have another approach too and you'll be happy that this another approach doesn't use any kind recurssion. So let's see what this approach is-:

Tabulation -:

Tabulation is a bottom-up approach where we store the results of the subproblems in a table and use these results to solve larger subproblems until we solve the entire problem. 
Tabulation is typically implemented using iteration and is well-suited for problems that have a large set of inputs.
So here we will make a 2D vector of size (N+1)*(W+1). Why are we taking (N+1) here, don't worry you will know it shortly.
While using DP it is very important to know exaclty what your data structure is storing and doing. It is important to know the meaning of each block of your 2D vector.
Here let's name our vector as dp. So dp[0][0] means that we are taking 0 weights to fill our bag of capacity 0, this will yeild a profit of 0. Now look carefully this was our base condition for recurssion (W<=0 and
idx>=N). dp[0][2] means that we have 0 weights and our bag capacity is 2 (idx>=N and W>0). dp[3][0] means that we have 3 weights and our bag capacity is 0 (idx<N and W<=0). Now you may be getting that how we are 
converting a recurssion solution into iterating one. Our valid case is idx<N and W>0 so this is the case dp[(1-N)][(1-W)]. We have two choices of each weight either we can take it or skip it. So if we are taking
a particular weight then we will subtract its weight from current capacity of bag and add its value to the previous answer. So ans1=val[i-1]+dp[i-1][j-wt[i-1]]. And if we are skipping that weight then we will only 
consider the previous answer i.e. ans2=dp[i-1][j]. Now answer of current state will be maximum of ans1 and ans2 (dp[i][j]=max(ans1,ans2). And our final answer will be formed in last block which was our actual problem
i.e. we have our total capacity W and weights N. 
As we are seeing every possible case of W and idx the time complexity O(N*W).
