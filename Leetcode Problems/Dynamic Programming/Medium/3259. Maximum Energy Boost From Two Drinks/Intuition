Problem Statement -:

You are given two integer arrays energyDrinkA and energyDrinkB of the same length n by a futuristic sports scientist. These arrays represent the energy boosts 
per hour provided by two different energy drinks, A and B, respectively.
You want to maximize your total energy boost by drinking one energy drink per hour. However, if you want to switch from consuming one energy drink to the other, 
you need to wait for one hour to cleanse your system (meaning you won't get any energy boost in that hour).
Return the maximum total energy boost you can gain in the next n hours.
Note that you can start consuming either of the two energy drinks.

Example 1 -:

Input: energyDrinkA = [1,3,1], energyDrinkB = [3,1,1]

Output: 5

Explanation:
To gain an energy boost of 5, drink only the energy drink A (or only B).

Example 2 -:

Input: energyDrinkA = [4,1,1], energyDrinkB = [1,1,3]

Output: 7

Explanation:
To gain an energy boost of 7:
Drink the energy drink A for the first hour.
Switch to the energy drink B and we lose the energy boost of the second hour.
Gain the energy boost of the drink B in the third hour.

Problem Constraints -:

n == energyDrinkA.length == energyDrinkB.length
3 <= n <= 105
1 <= energyDrinkA[i], energyDrinkB[i] <= 105

Topic Tags -: Arrays, Dynamic Programming

Intuition -:

Here we are given two arrays and we have to select elements from two arrays such that total enerygy is maximum. When we switch from one array to another array we
have to skip the current element of array and now we can take another array (if you want to switch from consuming one energy drink to the other, you need to wait 
for one hour to cleanse your system (meaning you won't get any energy boost in that hour). Now we want to maximize the energy so we can say that we can greedily 
take the maximum elements from two arrays but this won't work here as we are given that we have to drink the energyDrinks in order and we have to skip a drink in
case of switching. 
Now the best approach to solve this problem is calculating all the ways of selecting a drink. We have two choices either we can select a drink or switch to the 
other array and select drink from it. So this is a problem of 0/1 Knapsack with small modification. 
So we will set a pointer idx pointing at 0th of the arrays and we will also take flag that will tells us about array from which we are currently consuming drink.
We have two choices either we continue drinking from same aray or we can switch. The question says that we can start from any array so 0th index is special case
where we will set our current drink and after that we can continue from same array or switch to other array. While switching we have to skip an element (wait for
an hour). 
Using only recurssion will lead to excess time. The approach will take O(2^N), where N is size of array, time.
So we will use memoization here. Here idx and flag are changing so we will make a dp that will store each state of (idx,flag). So the size of array will be N*3
( 3 is taken because array1 is denoted by 1 and array2 by 2 and 0 is when we are selecting between two arrays).
The time taken by this approach is O(N) (as constant is ignored).
