Problem Statement -:

You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

Example 1 -:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.

Example 2 -:

Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.

Problem Constraints -:

n == arr.length
1 <= n <= 10
0 <= arr[i] < n
All the elements of arr are unique.

Topic Tags -: Array, Stack, Greedy, Sorting, Monotonic Stack

Approach -:

The problem says that we have to find the number of chunks, sorting them individually will result in a sorted array. We need to find maximum number of chunks. We know that in sorted array all the elements are
arranged in increasing order and here in array the numbers are in range [0,n-1] this implies that in sorted array i==arr[i]. 
So here we will find the elements that are in its correct position and these elements are increasing in order i.e. we will find maximum element in the array while iterating and check if the particular element is
at its correct place or not. If it is correct place then it gives us one chunk. This is how we will find maximum number of chunks.
