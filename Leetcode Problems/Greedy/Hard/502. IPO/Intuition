Problem Statement -:

Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital
before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital
after finishing at most k distinct projects.

You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.

Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.

The answer is guaranteed to fit in a 32-bit signed integer.

Example 1-:

Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]
Output: 4
Explanation: Since your initial capital is 0, you can only start the project indexed 0.
After finishing it you will obtain profit 1 and your capital becomes 1.
With capital 1, you can either start the project indexed 1 or the project indexed 2.
Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.
Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.

Example 2-:

Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]
Output: 6

Problem Constraints -:

1 <= k <= 105
0 <= w <= 109
n == profits.length
n == capital.length
1 <= n <= 105
0 <= profits[i] <= 104
0 <= capital[i] <= 109

Intuition -:

The question is saying that ith project has pure profit profit[i], here pure profit means regardless of capital invested in project you will earn complete profit
and w=w+profit[i]. So here you can see that capital[i] is having no effect on w due to pure profit. This part of question is very important. This is the main foundation
of question.
We have to complete at most k projects such that final capital is maximized.
Now here arises two situations whether we can complete a project or cannot complete, and we can complete the project if and only if we have sufficient capital to 
invest i.e. w>=capital[i]. Hence we can say that we have two choises when w>=capital[i] (we can complete a project or cannot complete) and single choise 
(not completing project) when w<capital[i]. So this is the Dynamic Programming approach (0/1 Knapsack). We will make a dp which will store the answer of every state
undergoing changes in k, i and w. Looking at constraints the maximum time that can be taken is O(105*105*(109+profits)) this will be approximated to 10^9. This approach
is taking considerably large time. Let's think of some other way...
Another way of solving this problem is to complete the projects that require least capital. But it is not as simple as it is written here. We will take the project that
least capital but has maximum profit.
Ex -: k=2, w=0, profits=[5,2,6], capital=[0,3,3]
Here we have to complete three projects, so we can either complete 1st project and 2nd project and earn profit of (5+2)=7 or we can complete 1st and 3rd project and 
earn a profit of (5+6)=11. We will go with second way as it is giving maximum final capital. 
We will put the capital and profit together as pair {profit[i],capital[i]} in a vector and then we will sort the array according to capital. To maintain maximum profit we will use a max heap. We will keep the 
pair of {profit[i],capital[i]} in max heap.
We will push an element in max heap only if w>=capital otherwise if our heap is not empty and our projects are still remaining, we will include the maximum profit that we get
from max heap in our final capital and decrement k and remove that project from max heap. We will continue the till we have complete k projects or heap is not empty or we have
processed all projects.
If our heap is not empty and k>0 then we will take all the projects in heap till k==0.
So here we are simply taking the project that needs least capital first and maintaining max heap to get maximum profit.
The approach is greedy because we investing least capital and getting maximum profit.
