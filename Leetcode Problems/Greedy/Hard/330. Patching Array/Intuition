Problem Statement -:

Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.

Example 1 -:

Input: nums = [1,3], n = 6
Output: 1
Explanation:
Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.

Example 2 -:

Input: nums = [1,5,10], n = 20
Output: 2
Explanation: The two patches can be [2, 4].

Problem Constraints -:

1 <= nums.length <= 1000
1 <= nums[i] <= 104
nums is sorted in ascending order.
1 <= n <= 231 - 1

Intuition -:

So here in this question we are given an array in increasing order and we need to add some elements to array such that adding any subsequence of elements will give a number in range [1,n]. 
The approach is pretty clear by seeing the examples above. If we add N natural numbers we get sum as N(N+1)/2 and all the numbers between [1,N(N+1)/2] can easily be derieved using n natural numbers. If you have 
doubt just see these examples-:
Eg1 -: 1,2,3 
sum=3(3+1)/2 
sum=6
[1,2,3,3+1,3+2,3+2+1]
[1,2,3,4,5,6]
Eg2 -: 1,2,3,4
sum=4(4+1)/2
sum=10
[1,2,3,4,4+1,4+2,4+3,4+3+1,4+3+2,4+3+2+1]
[1,2,3,4,5,6,7,8,9,10]
So here you can see that any subsequence of first N natural numbers are derieving other numbers in range [N+1,N(N+1)/2] and this is the intuition used to solve this problem.
We will take a variable sum initialized by 0. The sum will keep the track of consecutive numbers if any smaller number is missing like in our first example 2 is missing then it will be added to sum and we will
increase our answer counter by 1, otherwise we will add the array element to sum and work till our sum is less than n.
So this is how greedily we are forming our answer by making use of N(N+1)/2.
